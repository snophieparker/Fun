import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt

class WebScraper:
    def __init__(self, url):
        self.url = url
        self.data = None

    def scrape_data(self):
        # Send a GET request to the URL
        response = requests.get(self.url)

        if response.status_code == 200:
            # Parse the HTML content using BeautifulSoup
            soup = BeautifulSoup(response.content, 'html.parser')

            # Extract relevant data from the webpage
            # (Example: Scraping data from a table)
            table = soup.find('table', {'class': 'table-class'})  # Replace with the actual class of the table
            rows = table.find_all('tr')

            # Process data into a pandas DataFrame
            data = []
            for row in rows:
                cols = row.find_all('td')
                cols = [col.text.strip() for col in cols]
                data.append(cols)

            # Create a DataFrame
            self.data = pd.DataFrame(data[1:], columns=data[0])
        else:
            print("Failed to fetch data.")

    def analyze_data(self):
        # Perform data analysis and visualization
        if self.data is not None:
            # Example: Analyzing and visualizing data
            # Convert columns to numeric for analysis
            self.data['NumericColumn'] = pd.to_numeric(self.data['NumericColumn'])

            # Generate a simple bar plot
            plt.figure(figsize=(10, 6))
            plt.bar(self.data['CategoryColumn'], self.data['NumericColumn'])
            plt.xlabel('Categories')
            plt.ylabel('Numeric Values')
            plt.title('Data Analysis')
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()
        else:
            print("No data available for analysis.")

# Example usage of WebScraper class
if __name__ == "__main__":
    # Initialize WebScraper object with the URL to scrape
    url_to_scrape = 'https://example.com/data'  # Replace with the actual URL
    web_scraper = WebScraper(url_to_scrape)

    # Scrape data from the website
    web_scraper.scrape_data()

    # Analyze and visualize the scraped data
    web_scraper.analyze_data()
