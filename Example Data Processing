import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Create a class for data preprocessing and model training
class DataProcessor:
    def __init__(self, data_path):
        self.data = pd.read_csv(data_path)
        self.X = None
        self.y = None
        self.model = None

    def preprocess_data(self):
        # Perform data preprocessing steps
        self.data.dropna(inplace=True)
        self.X = self.data.drop('target_column', axis=1)
        self.y = self.data['target_column']

    def train_model(self):
        # Split data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42)

        # Train a RandomForestClassifier model
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.model.fit(X_train, y_train)

        # Evaluate model performance
        predictions = self.model.predict(X_test)
        accuracy = accuracy_score(y_test, predictions)
        report = classification_report(y_test, predictions)

        print(f"Model Accuracy: {accuracy}")
        print(f"Classification Report:\n{report}")

    def predict(self, new_data):
        # Use the trained model to make predictions on new data
        return self.model.predict(new_data)

# Example usage of the DataProcessor class
if __name__ == "__main__":
    # Initialize DataProcessor object with data file path
    data_processor = DataProcessor('path/to/your/data.csv')

    # Preprocess data
    data_processor.preprocess_data()

    # Train the model
    data_processor.train_model()

    # Make predictions on new data
    new_data = np.array([[val1, val2, val3, ...]])  # Replace with actual values
    predictions = data_processor.predict(new_data)
    print(f"Predictions for new data: {predictions}")
